{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","validationError","invalid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","name","elementType","Object","assign","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","type","placeholder","validation","required","valid","email","isEmail","street","city","zipCode","minLength","maxLength","isNumeric","country","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"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","file":"static/js/1.b4e3a862.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  let validationError = null;\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  if (props.invalid && props.touched) {\n      validationError = <p className={classes.ValidationError}>Please enter a valid {props.name}!</p>;\n  }\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('textarea'):\n      inputElement = <textarea\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {props.elementConfig.options.map(option => (\n            <option\n              key={option.value}\n              value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  )\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\",\"ValidationError\":\"Input__ValidationError__1ElSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1J81r\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well!</h1>\n      <div style={{width: '100%', margin: 'auto'}}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button\n        btnType=\"Danger\"\n        clicked={props.checkoutCancelled}>CANCEL</Button>\n      <Button\n        btnType=\"Success\"\n        clicked={props.checkoutContinued}>CONTINUE</Button>\n    </div>\n  )\n}\n\nexport default checkoutSummary\n","import React, { Component } from 'react';\nimport axios from '../../../axios-orders';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.css';\nimport Input from '../../../components/UI/Input/Input'\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your Email'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      city: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your City'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      state: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your State'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Zip Code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n          isNumeric: true\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'cheapest', displayValue: 'Cheapest'}\n          ]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  }\n\n  orderHandler = (event) => {\n    event.preventDefault();\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    };\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    }\n    this.props.onOrderBurger(order, this.props.token)\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n  }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        name: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            name={formElement.name}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            touched={formElement.config.touched}\n            shouldValidate={formElement.config.validation}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER NOW</Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data!</h4>\n        {form}\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  }\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace('/checkout/contact-data');\n  }\n\n  render () {\n    let summary = <Redirect to=\"/\" />\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler} />\n          <Route\n            path={this.props.match.path + '/contact-data'}\n            component={ContactData} />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  }\n}\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}
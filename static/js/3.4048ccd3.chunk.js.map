{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","validationError","invalid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","name","elementType","Object","assign","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_home_sean_wdi_bos_25_post_course_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.4048ccd3.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  let validationError = null;\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  if (props.invalid && props.touched) {\n      validationError = <p className={classes.ValidationError}>Please enter a valid {props.name}!</p>;\n  }\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('textarea'):\n      inputElement = <textarea\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {props.elementConfig.options.map(option => (\n            <option\n              key={option.value}\n              value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  )\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\",\"ValidationError\":\"Input__ValidationError__1ElSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility'\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Email'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignup: true\n  }\n\n  componentDidMount () {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n    this.setState({controls: updatedControls})\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return {isSignup: !prevState.isSignup};\n    });\n  }\n\n  render () {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        name: key,\n        config: this.state.controls[key]\n      });\n    }\n    let form = formElementsArray.map(formElement => {\n      return <Input\n        key={formElement.id}\n        name={formElement.name}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        touched={formElement.config.touched}\n        shouldValidate={formElement.config.validation}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n    });\n    if (this.props.loading) {\n      form = <Spinner />\n    }\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = (\n        <p>{this.props.error.message}</p>\n      )\n    }\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        <h3>{this.state.isSignup ? 'Sign Up' : 'Login'}</h3>\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button\n          clicked={this.switchAuthModeHandler}\n          btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'LOGIN' : 'SIGN UP'}</Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}